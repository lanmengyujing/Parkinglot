/*
 * This build file was auto generated by running the Gradle 'buildSetup' task
 * by 'twer' at 'Wed Oct 16 19:29:24 CST 2013' with Gradle 1.6
 *
 * This generated file contains an out - commented sample java project
 * to get you started. For a quick start with Gradle have a look at the Java Quickstart
 * chapter in the Gradle Userguide available at http://gradle.org/docs/1.6/userguide/tutorial_java_projects.html
 */


apply plugin: 'java' // applies the java plugin
apply plugin: 'idea'
apply plugin: 'war'

task createJavaProject << {
    sourceSets*.java.srcDirs*.each { it.mkdirs() }
    sourceSets*.resources.srcDirs*.each { it.mkdirs()}
}

task createWebProject(dependsOn: 'createJavaProject') << {
    def webAppDir = file("$webAppDirName")
    webAppDir.mkdirs()
}

repositories {
    mavenCentral() // Use 'maven central' for resolving your thirdparty dependencies.
    // you can declare any maven/ivy/file repository to resolve your thirdparty dependencies
}

dependencies {
    // in this section you declare your dependencies for your production and your test code.

    // the production code uses the slf4j logging api at compile time
    compile('org.slf4j:slf4j-api:1.7.5',
            'com.google.guava:guava:r09'
    )

    // declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile("junit:junit:4.11",
            'org.hamcrest:hamcrest-all:1.3'
    )
}

